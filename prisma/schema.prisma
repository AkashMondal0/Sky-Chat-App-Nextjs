

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// chat app schemas
model User {
  id            String         @id @default(uuid())
  userId        String         @unique
  name          String
  imageUrl      String         @db.Text
  email         String         @db.Text
  phone         String         @db.Text
  conversations Conversation[]
  groups        Group[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id              String          @id @default(uuid())
  users           User[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  lastMessage     String          @db.Text
  lastMessageTime DateTime        @default(now())
  messages        MessageDirect[]
}

model MessageDirect {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text
  userId  String
  deleted Boolean @default(false)

  conversationId String
  Conversation   Conversation? @relation(fields: [conversationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// group chat schemas

model Group {
  id              String    @id @default(uuid())
  name            String    @db.Text
  Members         Member[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastMessage     String    @db.Text
  lastMessageTime DateTime  @default(now())
  messages        Message[]
  author          User?     @relation(fields: [authorId], references: [id])
  authorId        String?
}

enum MemberRole {
  ADMIN
  COADMIN
  MEMBER
}

model Member {
  id        String     @id @default(uuid())
  role      MemberRole @default(MEMBER)
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  groupId   String
  group     Group      @relation(fields: [groupId], references: [id])
}

model Message {
  id       String  @id @default(uuid())
  content  String  @db.Text
  fileUrl  String? @db.Text
  memberId String
  groupId  String
  group    Group   @relation(fields: [groupId], references: [id])
  deleted  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
