generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Notification {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  title        String   @db.Text
  body         String   @db.Text
  read         Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  messageCount Int      @default(0)
}

// chat app schemas
model User {
  id       String @id @default(uuid())
  userId   String @unique
  name     String
  imageUrl String @db.Text
  email    String @db.Text
  phone    String @db.Text
  status   String @db.Text

  notification  Notification[]
  conversations Conversation[]
  groups        Group[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id              String          @id @default(uuid())
  users           User[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  lastMessage     String          @db.Text
  lastMessageTime DateTime        @default(now())
  messages        MessageDirect[]
  messageCount    Int             @default(0)
}

model SeenBy {
  id        String        @id @default(uuid())
  userId    String
  message   MessageDirect @relation(fields: [messageId], references: [id])
  messageId String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model MessageDirect {
  id             String        @id @default(uuid())
  content        String        @db.Text
  fileUrl        String?       @db.Text
  memberId       String
  deleted        Boolean       @default(false)
  seen           Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  seenBy         SeenBy[]
  Conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String
}

// group chat schemas

model Group {
  id              String    @id @default(uuid())
  name            String    @db.Text
  Members         Member[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastMessage     String    @db.Text
  lastMessageTime DateTime  @default(now())
  messages        Message[]
  author          User?     @relation(fields: [authorId], references: [id])
  authorId        String?
  messageCount    Int       @default(0)
}

enum MemberRole {
  ADMIN
  COADMIN
  MEMBER
}

model Member {
  id        String     @id @default(uuid())
  role      MemberRole @default(MEMBER)
  userId    String
  // user        User          @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  groupId   String
  group     Group      @relation(fields: [groupId], references: [id])
}

model GroupSeenBy {
  id              String   @id @default(uuid())
  userId          String
  messageId       String
  message         Message  @relation(fields: [messageId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  messageDirectId String?
}

model Message {
  id       String        @id @default(uuid())
  content  String        @db.Text
  fileUrl  String?       @db.Text
  memberId String
  groupId  String
  group    Group         @relation(fields: [groupId], references: [id])
  deleted  Boolean       @default(false)
  seenBy   GroupSeenBy[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
